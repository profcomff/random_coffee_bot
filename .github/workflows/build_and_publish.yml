name: Build, publish and deploy docker

on:
  push:
    branches: [ 'main' ]
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    name: Build and push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=test,enable=true
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-testing:
    name: Deploy Testing
    needs: build-and-push-image
    runs-on: [ self-hosted, Linux, testing ]
    environment:
      name: Testing
    env:
      CONTAINER_NAME: com_profcomff_tgbot_randomcoffee_test
    permissions:
      packages: read
    steps:
      - name: Pull new version
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test
      - name: Migrate DB
        run: |
          docker run \
            --rm \
            --env DB_DSN=${{ secrets.DB_DSN }} \
            --env TG_TOKEN=${{ secrets.TG_TOKEN }} \
            --env MARKETING_URL=${{ vars.MARKETING_URL }} \
            --env DEFAULT_PARE_iD=${{ vars.DEFAULT_PARE_iD }} \
            --env ADMIN_TG_ID=${{ vars.ADMIN_TG_ID }} \
            --env DEFAULT_PARE_USERNAME=${{ vars.DEFAULT_PARE_USERNAME }} \
            --name ${{ env.CONTAINER_NAME }}_migration \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test \
            alembic upgrade head
      - name: Run new version
        run: |
          docker stop ${{ env.CONTAINER_NAME }} || true && docker rm ${{ env.CONTAINER_NAME }} || true
          docker run \
            --detach \
            --restart on-failure:3 \
            --env DB_DSN=${{ secrets.DB_DSN }} \
            --env TG_TOKEN=${{ secrets.TG_TOKEN }} \
            --env MARKETING_URL=${{ vars.MARKETING_URL }} \
            --env DEFAULT_PARE_iD=${{ vars.DEFAULT_PARE_iD }} \
            --env ADMIN_TG_ID=${{ vars.ADMIN_TG_ID }} \
            --env DEFAULT_PARE_USERNAME=${{ vars.DEFAULT_PARE_USERNAME }} \
            --name ${{ env.CONTAINER_NAME }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test

  deploy-profcom:
    name: Deploy Production Profcom
    needs: build-and-push-image
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: [ self-hosted, Linux, production ]
    environment:
      name: Production_profcom
    env:
      CONTAINER_NAME: com_profcomff_tgbot_randomcoffee_profcom
    permissions:
      packages: read
    steps:
      - name: Pull new version
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
      - name: Migrate DB
        run: |
          docker run \
            --rm \
            --env DB_DSN=${{ secrets.DB_DSN }} \
            --env TG_TOKEN=${{ secrets.TG_TOKEN }} \
            --env MARKETING_URL=${{ vars.MARKETING_URL }} \
            --env DEFAULT_PARE_iD=${{ vars.DEFAULT_PARE_iD }} \
            --env ADMIN_TG_ID=${{ vars.ADMIN_TG_ID }} \
            --env DEFAULT_PARE_USERNAME=${{ vars.DEFAULT_PARE_USERNAME }} \
            --name ${{ env.CONTAINER_NAME }}_migration \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            alembic upgrade head
      - name: Run new version
        run: |
          docker stop ${{ env.CONTAINER_NAME }} || true && docker rm ${{ env.CONTAINER_NAME }} || true
          docker run \
            --detach \
            --restart always \
            --env DB_DSN=${{ secrets.DB_DSN }} \
            --env TG_TOKEN=${{ secrets.TG_TOKEN }} \
            --env MARKETING_URL=${{ vars.MARKETING_URL }} \
            --env DEFAULT_PARE_iD=${{ vars.DEFAULT_PARE_iD }} \
            --env ADMIN_TG_ID=${{ vars.ADMIN_TG_ID }} \
            --env DEFAULT_PARE_USERNAME=${{ vars.DEFAULT_PARE_USERNAME }} \
            --name ${{ env.CONTAINER_NAME }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
  deploy-viribus:
    name: Deploy Production Viribus
    needs: build-and-push-image
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: [ self-hosted, Linux, production ]
    environment:
      name: Production_viribus
    env:
      CONTAINER_NAME: com_profcomff_tgbot_randomcoffee_viribus
    permissions:
      packages: read
    steps:
      - name: Pull new version
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
      - name: Migrate DB
        run: |
          docker run \
            --rm \
            --env DB_DSN=${{ secrets.DB_DSN }} \
            --env TG_TOKEN=${{ secrets.TG_TOKEN }} \
            --env MARKETING_URL=${{ vars.MARKETING_URL }} \
            --env DEFAULT_PARE_iD=${{ vars.DEFAULT_PARE_iD }} \
            --env ADMIN_TG_ID=${{ vars.ADMIN_TG_ID }} \
            --env DEFAULT_PARE_USERNAME=${{ vars.DEFAULT_PARE_USERNAME }} \
            --name ${{ env.CONTAINER_NAME }}_migration \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            alembic upgrade head
      - name: Run new version
        run: |
          docker stop ${{ env.CONTAINER_NAME }} || true && docker rm ${{ env.CONTAINER_NAME }} || true
          docker run \
            --detach \
            --restart always \
            --env DB_DSN=${{ secrets.DB_DSN }} \
            --env TG_TOKEN=${{ secrets.TG_TOKEN }} \
            --env MARKETING_URL=${{ vars.MARKETING_URL }} \
            --env DEFAULT_PARE_iD=${{ vars.DEFAULT_PARE_iD }} \
            --env ADMIN_TG_ID=${{ vars.ADMIN_TG_ID }} \
            --env DEFAULT_PARE_USERNAME=${{ vars.DEFAULT_PARE_USERNAME }} \
            --name ${{ env.CONTAINER_NAME }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
  deploy-burevestnik:
    name: Deploy Production Bur
    needs: build-and-push-image
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: [ self-hosted, Linux, production ]
    environment:
      name: Production_bur
    env:
      CONTAINER_NAME: com_profcomff_tgbot_randomcoffee_bur
    permissions:
      packages: read
    steps:
      - name: Pull new version
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
      - name: Migrate DB
        run: |
          docker run \
            --rm \
            --env DB_DSN=${{ secrets.DB_DSN }} \
            --env TG_TOKEN=${{ secrets.TG_TOKEN }} \
            --env MARKETING_URL=${{ vars.MARKETING_URL }} \
            --env DEFAULT_PARE_iD=${{ vars.DEFAULT_PARE_iD }} \
            --env ADMIN_TG_ID=${{ vars.ADMIN_TG_ID }} \
            --env DEFAULT_PARE_USERNAME=${{ vars.DEFAULT_PARE_USERNAME }} \
            --env IS_FOR_BUR=true \
            --name ${{ env.CONTAINER_NAME }}_migration \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            alembic upgrade head
      - name: Run new version
        run: |
          docker stop ${{ env.CONTAINER_NAME }} || true && docker rm ${{ env.CONTAINER_NAME }} || true
          docker run \
            --detach \
            --restart always \
            --env DB_DSN=${{ secrets.DB_DSN }} \
            --env TG_TOKEN=${{ secrets.TG_TOKEN }} \
            --env MARKETING_URL=${{ vars.MARKETING_URL }} \
            --env DEFAULT_PARE_iD=${{ vars.DEFAULT_PARE_iD }} \
            --env IS_FOR_BUR=true \
            --env ADMIN_TG_ID=${{ vars.ADMIN_TG_ID }} \
            --env DEFAULT_PARE_USERNAME=${{ vars.DEFAULT_PARE_USERNAME }} \
            --name ${{ env.CONTAINER_NAME }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest